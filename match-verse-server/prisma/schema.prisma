// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Temp {
  id Int @id @default(autoincrement())
}

model User {
  userId       Int     @id @default(autoincrement())
  username     String  @unique
  email        String  @unique
  password     String
  experience   Int     @default(0)
  rating       Int     @default(0)
  userImageUrl String?


  booking          Booking[]
  createdMatches   MatchRequest[]    @relation(name: "matchCreator")
  partneredMatches MatchRequest[]    @relation(name: "matchPartner")
  UserVenueRating  UserVenueRating[]

}

model Venue {
  venueId       Int     @id @default(autoincrement())
  email         String  @unique
  password      String
  location      String
  openingTime   Int
  closingTime   Int
  venueImageUrl String?
  rating        Int     @default(0)
  totalRating   Int     @default(0)

  venueName     String

  court           Court[]
  UserVenueRating UserVenueRating[]
}

model Court {
  courtId    Int          @id @default(autoincrement())
  name       String
  venueId    Int
  booking    Booking[]
  courtImage CourtImage[]
  venue      Venue        @relation(fields: [venueId], references: [venueId])
}

model Booking {
  bookingId    Int    @id @default(autoincrement())
  courtId      Int
  date         String
  startingTime String
  userId       Int?
  user         User?  @relation(fields: [userId], references: [userId])


  matchRequest MatchRequest[]
  court        Court          @relation(fields: [courtId], references: [courtId])

  @@unique([courtId, date, startingTime])
}

model MatchRequest {
  requestId   Int    @id @default(autoincrement())
  bookingId   Int    @unique
  matchType   String
  createdById Int
  partnerId   Int?
  status      String @default("pending")

  createdBy User  @relation(fields: [createdById], references: [userId], name: "matchCreator")
  partner   User? @relation(fields: [partnerId], references: [userId], name: "matchPartner")

  booking Booking @relation(fields: [bookingId], references: [bookingId])

  @@index([bookingId])
}

model CourtImage {
  courtImageId Int    @id @default(autoincrement())
  imageUrl     String
  courtId      Int
  court        Court  @relation(fields: [courtId], references: [courtId])
}

model UserVenueRating {
  userRatingId Int @id @default(autoincrement())
  venueId      Int
  userId       Int
  rating       Int

  user  User  @relation(fields: [userId], references: [userId])

  Venue Venue @relation(fields: [venueId], references: [venueId])
}
